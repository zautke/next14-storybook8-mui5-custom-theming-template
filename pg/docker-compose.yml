services:
  pg:
    image: ${PGIMAGE}
    build:
      context: .
      dockerfile: lab.postgres.${PGENV:-development}.Dockerfile
    hostname: "labpg`now`"
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB_USER=${POSTGRES_DB}
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      # test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
      # timeout: 45s
      # interval: 10s
      # retries: 10
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ${PGDATA_LOCAL}:/var/lib/postgresql/data
      - ./pg_logs:/logs
      #- ./db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql <-- example
      # - ./std_postgres.conf:/var/lib/postgresql/data/postgresql.conf
      # - ./std_pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
      - ./pg_hba_std.conf:/etc/postgresql/postgresql.conf
      - ./postgres_std.conf:/etc/postgresql/pg_hba.conf
    #command: postgres -c config_file=/etc/postgresql/postgresql.conf
    # command: postgres -c logging_collector=on -c log_destination=stderr -c log_directory=/logs
    networks:
      - backend

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_MAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PW}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    entrypoint:
    - "/bin/sh"
    - "-c"
    - "/bin/echo 'postgres:5432:*:postgres:postgres' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"
    ports:
      - "8888:80"
    restart: always
    networks:
      - backend
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./docker_pgadmin_servers.json:/pgadmin4/servers.json

volumes:
  pgadmin-data:
  pgdata:
    name: ${VOLUME_ID}


networks:
  backend:
    name: ${NETWORK_ID}
