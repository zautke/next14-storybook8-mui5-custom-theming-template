user                  nginx;
worker_processes      1; # EC2 t2.micro has 1 vCPU (default: auto)
pid                   /run/nginx.pid;
include               /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections  1024;
    multi_accept off;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    server_tokens off;

    # Logs
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_logâ€‚off;
    error_log /var/log/nginx/error.log;

    # Buffers
    client_body_buffer_size 10K;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 4 4k;

    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    # Brotli compression
    brotli on;
    brotli_static on;
    brotli_comp_level 6;
    brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Gzip configuration
    #gzip on;
    #gzip_disable "msie6";
    #gzip_vary on;
    #gzip_proxied any;
   # gzip_min_length 10240;
    #gzip_comp_level 6;
    #gzip_buffers 16 8k;
    #gzip_http_version 1.1;
    #gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=100r/s;


    server {
        if ($host = www.braisenly.com) {
            return 301 https://$host$request_uri;
        } # managed by Certbot


        if ($host = braisenly.com) {
            return 301 https://$host$request_uri;
        } # managed by Certbot


        listen 80;
        listen [::]:80;

        server_name braisenly.com www.braisenly.com;

        location /.well-known/acme-challenge/ {
            root /var/www/html;
        }

        location / {
            return 301 https://$host$request_uri;
        }


    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        server_name braisenly.com www.braisenly.com;

        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 10m;

        ssl_certificate /etc/letsencrypt/live/braisenly.com/fullchain.pem; # managed by Certbot
        ssl_certificate_key /etc/letsencrypt/live/braisenly.com/privkey.pem; # managed by Certbot
        ssl_trusted_certificate /etc/letsencrypt/live/braisenly.com/chain.pem;

        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
        ssl_prefer_server_ciphers on;

        # Add security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";

        pagespeed on;
        pagespeed FileCachePath "/var/cache/ngx_pagespeed/";
        pagespeed RewriteLevel OptimizeForBandwidth;

        location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
            add_header "" "";
            }

        location ~ "^/pagespeed_static/" { }
        location ~ "^/ngx_pagespeed_beacon$" { }

        pagespeed SslCertDirectory /etc/letsencrypt/live/braisenly.com;
        pagespeed SslCertFile /etc/letsencrypt/live/braisenly.com/fullchain.pem;

        # root /var/www/lab/dist;
        # index index.html;

        #location ~* \.(css|js|jpg|jpeg|png|gif|ico)$ {
        #    root /path/to/static/files;
        #    try_files $uri $uri/ =404;
        #}

        location _next/ {
            alias /srv/udemii-fe/.next/;
            expires 30d;
            access_log on;
        }

        location / {
            proxy_pass http://localhost:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        }

        # Proxy requests to port 3000
        location /api/ {
            proxy_pass http://127.0.0.1:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy requests to port 6000
        location /socket/ {
            proxy_pass http://127.0.0.1:6000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location ~ /\.well-known/acme-challenge {
            allow all;
        }
    }
}
